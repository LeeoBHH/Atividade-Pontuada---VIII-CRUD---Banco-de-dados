from sqlalchemy import create_engine, Column, String, Integer, Float
from sqlalchemy.orm import sessionmaker, declarative_base

# Leonardo Araujo De Miranda Dos Santos
# G93313

Base = declarative_base()
engine = create_engine('sqlite:///funcionarios.db')
Sessao = sessionmaker(bind=engine)

class Funcionario(Base):
    __tablename__ = 'funcionarios'
    
    cpf = Column(String, primary_key=True)
    nome = Column(String)
    idade = Column(Integer)
    setor = Column(String)
    funcao = Column(String)
    salario = Column(Float)
    telefone = Column(String)

Base.metadata.create_all(engine)

def salvar_funcionario(cpf, nome, idade, setor, funcao, salario, telefone):
    sessao = Sessao()
    funcionario = Funcionario(cpf=cpf, nome=nome, idade=idade, setor=setor, funcao=funcao, salario=salario, telefone=telefone)
    sessao.add(funcionario)
    sessao.commit()
    sessao.close()
    print("Funcionário adicionado!")

def listar_funcionarios():
    sessao = Sessao()
    funcionarios = sessao.query(Funcionario).all()
    for funcionario in funcionarios:
        print(f"Nome: {funcionario.nome}, CPF: {funcionario.cpf}, Setor: {funcionario.setor}, Salário: R$ {funcionario.salario:.2f}, Telefone: {funcionario.telefone}")
    sessao.close()

def buscar_funcionario(cpf):
    sessao = Sessao()
    funcionario = sessao.query(Funcionario).filter(Funcionario.cpf == cpf).first()
    sessao.close()
    return funcionario

def atualizar_funcionario(cpf, nome, idade, setor, funcao, salario, telefone):
    sessao = Sessao()
    funcionario = buscar_funcionario(cpf)
    if funcionario:
        funcionario.nome = nome
        funcionario.idade = idade
        funcionario.setor = setor
        funcionario.funcao = funcao
        funcionario.salario = salario
        funcionario.telefone = telefone
        sessao.commit()
        print("Funcionário atualizado!")
    else:
        print("Funcionário não encontrado.")
    sessao.close()

def excluir_funcionario(cpf):
    sessao = Sessao()
    funcionario = buscar_funcionario(cpf)
    if funcionario:
        sessao.delete(funcionario)
        sessao.commit()
        print("Funcionário excluído!")
    else:
        print("Funcionário não encontrado.")
    sessao.close()

while True:
    print("\n=== RH System ===")
    print("1 - Adicionar funcionário")
    print("2 - Consultar um funcionário")
    print("3 - Atualizar funcionário")
    print("4 - Excluir funcionário")
    print("5 - Listar todos os funcionários")
    print("0 - Sair")

    opcao = input("Escolha uma opção: ")

    if opcao == '1':
        cpf = input("CPF: ")
        nome = input("Nome: ")
        idade = int(input("Idade: "))
        setor = input("Setor: ")
        funcao = input("Função: ")
        salario = float(input("Salário: "))
        telefone = input("Telefone: ")
        salvar_funcionario(cpf, nome, idade, setor, funcao, salario, telefone)

    elif opcao == '2':
        cpf = input("Informe o CPF do funcionário: ")
        funcionario = buscar_funcionario(cpf)
        if funcionario:
            print(f"Nome: {funcionario.nome}, Idade: {funcionario.idade}, Setor: {funcionario.setor}, Salário: R$ {funcionario.salario:.2f}, Telefone: {funcionario.telefone}")
        else:
            print("Funcionário não encontrado.")

    elif opcao == '3':
        cpf = input("Informe o CPF do funcionário a ser atualizado: ")
        funcionario = buscar_funcionario(cpf)
        if funcionario:
            nome = input("Novo nome: ")
            idade = int(input("Nova idade: "))
            setor = input("Novo setor: ")
            funcao = input("Nova função: ")
            salario = float(input("Novo salário: "))
            telefone = input("Novo telefone: ")
            atualizar_funcionario(cpf, nome, idade, setor, funcao, salario, telefone)
        else:
            print("Funcionário não encontrado.")

    elif opcao == '4':
        cpf = input("Informe o CPF do funcionário a ser excluído: ")
        excluir_funcionario(cpf)

    elif opcao == '5':
        listar_funcionarios()

    elif opcao == '0':
        break

    else:
        print("Opção inválida.")
